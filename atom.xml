<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lost Youth</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-10T15:01:47.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoyou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RocketMQ实战（一）</title>
    <link href="http://yoursite.com/2017/04/10/rocket-in-practice-1/"/>
    <id>http://yoursite.com/2017/04/10/rocket-in-practice-1/</id>
    <published>2017-04-10T14:58:00.000Z</published>
    <updated>2017-04-10T15:01:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>阿里巴巴有2大核心的分布式技术，一个是OceanBase，另一个就是RocketMQ。在实际项目中已经领教过RocketMQ的强大，本人计划写一个RocketMQ实战系列，将涵盖RocketMQ的简介，环境搭建，初步使用、API详解、架构分析、管理员集群操作等知识。</strong></p>
<h1 id="What-is-RocketMQ"><a href="#What-is-RocketMQ" class="headerlink" title="What is RocketMQ?"></a>What is RocketMQ?</h1><p>RocketMQ作为一款分布式的消息中间件（阿里的说法是不遵循任何规范的，所以不能完全用JMS的那一套东西来看它），经历了Metaq1.x、Metaq2.x的发展和淘宝双十一的洗礼，在功能和性能上远超ActiveMQ。</p>
<blockquote>
<p><strong>1.要知道RocketMQ原生就是支持分布式的，而ActiveMQ原生存在单点性。</strong></p>
<p><strong>2.RocketMQ可以保证严格的消息顺序，而ActiveMQ无法保证！</strong></p>
<p><strong>3.RocketMQ提供亿级消息的堆积能力，这不是重点，重点是堆积了亿级的消息后，依然保持写入低延迟！</strong></p>
<p><strong>4.丰富的消息拉取模式（Push or Pull）</strong></p>
<p><strong>Push好理解，比如在消费者端设置Listener回调；而Pull，控制权在于应用，即应用需要主动的调用拉消息方法从Broker获取消息，这里面存在一个消费位置记录的问题（如果不记录，会导致消息重复消费）。</strong></p>
<p><strong>5.在Metaq1.x/2.x的版本中，分布式协调采用的是Zookeeper，而RocketMQ自己实现了一个NameServer，更加轻量级，性能更好！</strong></p>
<p><strong>6.消息失败重试机制、高效的订阅者水平扩展能力、强大的API、事务机制等等（后续详细介绍）</strong></p>
</blockquote>
<h1 id="初步理解Producer-Consumer-Group"><a href="#初步理解Producer-Consumer-Group" class="headerlink" title="初步理解Producer/Consumer Group"></a>初步理解Producer/Consumer Group</h1><p>ActiveMQ中并没有Group这个概念，而在RocketMQ中理解Group的机制很重要。</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>Group机制</p>
<blockquote>
<p><strong>想过没有，通过Group机制，让RocketMQ天然的支持消息负载均衡！</strong></p>
<p><strong>比如某个Topic有9条消息，其中一个Consumer Group有3个实例（3个进程 OR 3台机器），那么每个实例将均摊3条消息！（注意RocketMQ只有一种模式，即发布订阅模式。）</strong></p>
</blockquote>
<h1 id="install-RocketMQ"><a href="#install-RocketMQ" class="headerlink" title="install RocketMQ"></a>install RocketMQ</h1><blockquote>
<p><strong>RocketMQ的Broker集群部署模式还挺多的，比如单Master模式、多Master模式、多Master多Slave模式（异步复制）、多Master多Slave模式（同步双写）等。明确个概念，RocketMQ Slave不可以写，可以读，类似于MySQL的主从机制。</strong></p>
<p><strong>单Master模式：
</strong></p>
<p><strong>无需多言，一旦单个broker重启或宕机，一切都结束了！很显然，线上不可以使用。</strong></p>
<p><strong>多Master模式：</strong></p>
<p><strong>全是Master，没有Slave。当然，一个broker宕机了，应用是无影响的，缺点在于宕机的Master上未被消费的消息在Master没有恢复之前不可以订阅。</strong></p>
<p><strong>多Master多Slave模式（异步复制）：</strong></p>
<p><strong>多对Master-Slave，高可用！采用异步复制的方式，主备之间短暂延迟，MS级别。Master宕机，消费者可以从Slave上进行消费，不受影响，但是Master的宕机，会导致丢失掉极少量的消息。</strong></p>
<p><strong>多Master多Slave模式（同步双写）：</strong></p>
<p><strong>和上面的区别点在于采用的是同步方式，也就是在Master/Slave都写成功的前提下，向应用返回成功，可见不论是数据，还是服务都没有单点，都非常可靠！缺点在于同步的性能比异步稍低。</strong></p>
</blockquote>
<p>这里我将采用2个Master的方式进行搭建演示，会了双Master，其他的将很简单。（多Master在实际中也是非常常用的，如果并发非常大，考虑多Master多Slave模式）</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>双Master模式架构</p>
<blockquote>
<p>在192.168.99.121/122机器上各一个NameServer、Master进程。</p>
</blockquote>
<p>以192.168.99.121为例：</p>
<h3 id="第一步，修改-etc-hosts文件"><a href="#第一步，修改-etc-hosts文件" class="headerlink" title="第一步，修改/etc/hosts文件"></a><strong>第一步，修改/etc/hosts文件</strong></h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>hosts配置</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>确保相互之间可以ping通</p>
<h3 id="第二步，解压并创建存储路径"><a href="#第二步，解压并创建存储路径" class="headerlink" title="第二步，解压并创建存储路径"></a><strong>第二步，解压并创建存储路径</strong></h3><blockquote>
<p><strong>tar -xvf alibaba-rocketmq-3.2.6.tar.gz
</strong></p>
<p><strong>mkdir -p alibaba-rocketmq/store/{commitlog,consumequeue,index}</strong></p>
</blockquote>
<h3 id="第三步，配置文件"><a href="#第三步，配置文件" class="headerlink" title="第三步，配置文件"></a><strong>第三步，配置文件</strong></h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>broker-x.properties</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>配置项</p>
<blockquote>
<p>上面已经将实际中常用的配置项给出来了！</p>
</blockquote>
<h3 id="第四步，修改日志配置文件"><a href="#第四步，修改日志配置文件" class="headerlink" title="第四步，修改日志配置文件"></a><strong>第四步，修改日志配置文件</strong></h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>注意到logback.*.xml配置文件中：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>需要替换${user.name}</p>
<p>可以使用sed进行替换：</p>
<blockquote>
<p><strong>sed -i ‘s#${user.home}#/software/alibaba-rocketmq#g’ *.xml
</strong></p>
</blockquote>
<h3 id="第五步，修改启动脚本中的JVM参数"><a href="#第五步，修改启动脚本中的JVM参数" class="headerlink" title="第五步，修改启动脚本中的JVM参数"></a><strong>第五步，修改启动脚本中的JVM参数</strong></h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>vim runbroker.sh/rumserver.sh</p>
<blockquote>
<p><strong>注意，在这里我将JVM的堆的初始化和最大大小统一设置为1G，并将新生代大小设置为512M。主要是考虑到我的虚拟机内存，实际上在线上是可以走默认的4G堆内存的。</strong></p>
</blockquote>
<h3 id="第六步，启动NameServer"><a href="#第六步，启动NameServer" class="headerlink" title="第六步，启动NameServer"></a><strong>第六步，启动NameServer</strong></h3><blockquote>
<p><strong>nohup sh mqnamesrv &amp;
</strong></p>
</blockquote>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>NameServer</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>nameserver启动日志</p>
<h3 id="第七步，启动broker-X"><a href="#第七步，启动broker-X" class="headerlink" title="第七步，启动broker-X"></a><strong>第七步，启动broker-X</strong></h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>启动broker</p>
<p>注意观察日志：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>broker.log</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>进程与端口</p>
<h3 id="第八步：RocketMQ-Console"><a href="#第八步：RocketMQ-Console" class="headerlink" title="第八步：RocketMQ Console"></a><strong>第八步：RocketMQ Console</strong></h3><blockquote>
<p>把rocketmq-console.war部署到Tomcat下即可。</p>
</blockquote>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>解压WAR包</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>在解压WAR包后的CLASS下更改config.properties</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>好久不见，TOM猫</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1240." alt=""></p>
<p>rocketmq管控台</p>
<blockquote>
<p><strong>这个管控台实际上还是比较简陋的，我们使用比较多的是mqadmin操作命令，后续会介绍。</strong></p>
</blockquote>
<p><strong>OK，到这里，双Master的搭建已经完成了！</strong></p>
<p><strong>本篇博客到此为止，下期再见，晚安！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;阿里巴巴有2大核心的分布式技术，一个是OceanBase，另一个就是RocketMQ。在实际项目中已经领教过RocketMQ的强大，本人计划写一个RocketMQ实战系列，将涵盖RocketMQ的简介，环境搭建，初步使用、API详解、架构分析、管理员集群操作
    
    </summary>
    
    
      <category term="RocketMQ" scheme="http://yoursite.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>Git由浅入深之分支管理</title>
    <link href="http://yoursite.com/2017/04/10/head-first-git-branch/"/>
    <id>http://yoursite.com/2017/04/10/head-first-git-branch/</id>
    <published>2017-04-10T14:50:00.000Z</published>
    <updated>2017-04-10T14:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>几乎所有的版本控制系统都以分支的方式进行操作，分支是独立于项目主线的一条支线，我们可以在不影响主线代码的情况下，在分支下进行工作。对于传统的一些版本控制工具来说，我们通常需要花费比较多的时间拷贝主线代码，创建一个分支，并且对分支的管理效率也越来越不令人满意，而如今备受推崇的Git确实名副其实，Git中的分支非常轻量，我们可以随时随意创建任意数量的新分支，几乎感觉不到什么延时，而且对分支的操作也很高效，如，切换分支，暂存内容，分支合并，分支提交等。</p>
<h2 id="Git分支的与众不同"><a href="#Git分支的与众不同" class="headerlink" title="Git分支的与众不同"></a>Git分支的与众不同</h2><p>上一节我们提到相对于其他大多数版本控制系统，Git分支是轻量且高效的，为什么呢？答案在前几篇已经有提到：传统的版本控制系统存储的数据是文件的变更，而Git则是存储一系列的文件快照（snapshot）。</p>
<p>Git分支的这些特性，使得分支对我们几乎没有什么限制，一般针对每一个功能或需求都可以随意创建分支，而在传统的版本控制系统，这样几乎是不现实的。</p>
<p>当我们向服务器提交数据时，Git会存储一个提交对象（commit object），这个存储对象包括一系列有用信息，<a href="http://blog.codingplayboy.com/2017/03/23/git_internal/" target="_blank" rel="external">详见上一篇中提交对象</a>。</p>
<h2 id="Git主干分支（master）"><a href="#Git主干分支（master）" class="headerlink" title="Git主干分支（master）"></a>Git主干分支（master）</h2><p>master，有主人，大师的意思，在Git是通常作为主干分支，Git初始化仓库时，默认创建的分支名就是master，就像默认的远端主机别名是origin一样，大多数人不会修改它，这并不说明它与别的分支有什么区别，你可以随意修改名称。</p>
<h2 id="分支类型"><a href="#分支类型" class="headerlink" title="分支类型"></a>分支类型</h2><p>在Git中，除了默认的master主干分支，我们创建的每一个分支，一般可分为两种：</p>
<ul>
<li>长运行分支（Long-Running branch）:与master并行，长期存在使用的分支，如用以测试项目稳定性或作为主分支；</li>
<li>主题分支（topic branch）：针对每一个需求或功能或bug而暂时创建的分支，一旦任务完成，即可能回收。</li>
</ul>
<h2 id="分支指针（HEAD）"><a href="#分支指针（HEAD）" class="headerlink" title="分支指针（HEAD）"></a>分支指针（HEAD）</h2><p>Git中有一个HEAD指针，始终指向当前分支，如图可见，项目当前处在master分支，之前一共有三次提交：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-logs.png" alt="提交历史记录"></p>
<p>上图可见，第一行显示了当前项目所有分支，<code>HEAD -&gt; master</code>表明当前所处分支为master，我们可以总结如下图：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-log.png" alt="branch"></p>
<p>我们可以在项目根目录.git文件下找到一个HEAD文件：<code>vi .git/HEAD</code>,其内保存了指向当前分支最新提交的指针：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-head.png" alt="HEAD"></p>
<p>该指针指向refs/heads/分支名文件，我们进入.git/refs/heads/目录，其下以分支名为文件名列出了所有分支：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-head-ref.png" alt="当前分支head"></p>
<p>我们查看当前分支文件，执行<code>vi master</code>:</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-head-ref-master.png" alt="当前分支ref"></p>
<p>可以看到，其内存储的就是当前分支的最新一次提交对象ID。</p>
<h2 id="创建分支（git-branch-git-checkout-b）"><a href="#创建分支（git-branch-git-checkout-b）" class="headerlink" title="创建分支（git branch, git checkout -b）"></a>创建分支（git branch, git checkout -b）</h2><p>接下来，假设有一个需求A，我们创建一个分支work-a:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b 分支名</div></pre></td></tr></table></figure>
<p><code>-b</code>参数声明为创建新分支</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-create.png" alt="创建新分支"></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-new-head.png" alt="新分支HEAD"></p>
<p>等价于以下两条指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch 分支名</div><div class="line">git checkout 分支名</div></pre></td></tr></table></figure>
<h2 id="切换分支（git-checkout）"><a href="#切换分支（git-checkout）" class="headerlink" title="切换分支（git checkout）"></a>切换分支（git checkout）</h2><p><code>git checkout 分支名</code>表示切换到该分支，上文提到指定<code>-b</code>配置即说明创建新分支。</p>
<p><strong>注：在切换分支前，一定确保当前分支的修改已经提交或者缓存。</strong></p>
<h2 id="多分支并行"><a href="#多分支并行" class="headerlink" title="多分支并行"></a>多分支并行</h2><p>我们经常会遇到同时需要开发多个功能和需求，或者突然发现线上bug需要紧急处理，我们只需要提交当前分支修改，然后切换到主干分支，从其基础上再切出一个新分支fix-bug1:</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-commit.png" alt="提交修改"></p>
<p>可以看到，在work-a分支上我们新增了一次提交：<code>b287b8e22470b20cc98e6224a8023708b4cc6989</code>。</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-create.png" alt="创建多分支"></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-new-head.png" alt="多分支结构图"></p>
<p>现在我们在fix-bug1分支上修复bug后，进行提交：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-commit-log.png" alt="提交及历史"></p>
<p>可以看到，在fix-bug1分支上多了一个提交：<code>ca270e6</code>，现在整个结构就变成如下图：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-commits-struc.png" alt="结构图"></p>
<h2 id="合并分支（git-merge）"><a href="#合并分支（git-merge）" class="headerlink" title="合并分支（git merge）"></a>合并分支（git merge）</h2><p>我们已经修复了某bug或完成了功能开发，这时要做的是把代码并入主干，，当然一般公司或团队都需要经过代码审查，才能并入主干，在此略过不谈，分支合并相关指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge 分支名</div></pre></td></tr></table></figure>
<p>该指令告诉Git将指定分支合并到当前分支，当然是可能出现冲突的，我们按照指示解决冲突，即可。</p>
<p>现在我们先切换到master分支，然后把fix-bug1分支并入主干：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-merge.png" alt="合并分支"></p>
<p>可以看到执行<code>git merge</code>指令后，状态信息显示：</p>
<ul>
<li>第一行Updating，告诉我们提交记录更新至<code>ca270e6</code>;</li>
<li>第二行Fast-forward，即快速推进，说明Git直接将当前分支推进到指向新提交对象;</li>
<li>后面是merge的内容信息</li>
</ul>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-merge-struc.png" alt="合并分之后结构"></p>
<h4 id="非快速推进合并（NO-FAST-FORWARD）"><a href="#非快速推进合并（NO-FAST-FORWARD）" class="headerlink" title="非快速推进合并（NO FAST-FORWARD）"></a>非快速推进合并（NO FAST-FORWARD）</h4><p>现在，我们再次创建一个分支fix-bug2，并进行几次修改提交：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-commits-log-2.png" alt="多次提交"></p>
<p>多次提交后，状态如下：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-commits-struc-2.png" alt="多次提交后结构"></p>
<p>我们通过非快速推进方式合并分支进主干分支：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-no-ff-merge.png" alt="非快速推进方式合并"></p>
<p>如上图，指定<code>--no-ff</code>即声明进行非快速推进合并，第二行的<code>Merge made by the &#39;recursive&#39; strategy</code>表明通过非快速推进方式合并，我们发现除了分支上进行的提交记录外，Git创建了一个新的提交对象：<code>7a657a</code>,使用<br><code>git log --graph</code>指令查看其信息:</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-log-graph.png" alt="提交记录图"></p>
<p>如图，快速推进方式合并入主干的fix-bug1分支的提交记录直接并入主线，且不会创建新的提交对象；而对于非快速推进方式合并的fix-bug2分支，其提交历史也都保存，但是并未进入主线，而是保存了一条支线，同时，在主线上创建一个新的提交对象。</p>
<p>最后描述其结构如图：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-no-ff-merge-struc.png" alt="非快速推进合并后结构"></p>
<h4 id="非快速推进与快速推进合并（FAST-FORWARD-amp-NO-FAST-FORWARD）"><a href="#非快速推进与快速推进合并（FAST-FORWARD-amp-NO-FAST-FORWARD）" class="headerlink" title="非快速推进与快速推进合并（FAST-FORWARD &amp; NO FAST-FORWARD）"></a>非快速推进与快速推进合并（FAST-FORWARD &amp; NO FAST-FORWARD）</h4><p>从上例，对比一下两种方式合并分支的异同：</p>
<ul>
<li>提交对象都会保存；</li>
<li>报存提交对象方式不同：快速推进方式是直接在主线（合并主分支）上，添加这些提交对象，即直接移动HEAD指针；而非快速推进方式是将提交对象保存在支线，然后在主线新建一个提交对象，修改HEAD指针及新建提交对象的指针，而且此新建提交对象有两个父提交对象（即有两个parent指针）。</li>
<li>合并后分支指向不同：快速推进合并后，两个分支将同时指向最新提交对象，而非快速推进合并后，合并主分支指向新建的提交对象，另一分支指向不变。</li>
</ul>
<p>我们查看一下新创建提交对象：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-no-ff-merge-commit.png" alt="新创建提交对象"></p>
<p>可以看到该提交对象中有两个指针指向父提交对象，一个指向主线中的父提交对象，一个指向fix-bug2分支合并而来的支线父提交对象。</p>
<h4 id="三路合并（THREE-WAY-MERGE）"><a href="#三路合并（THREE-WAY-MERGE）" class="headerlink" title="三路合并（THREE-WAY MERGE）"></a>三路合并（THREE-WAY MERGE）</h4><p>除了之前提到的两种合并的情况，其实还存在这样一种情况，就是现在假如我完成了work-a分支的开发，需要将其并入主干，我们能看到当前master主干分支已经推进到<code>7a6576</code>了，而work-a分支指向<code>b287b8</code>,两者有共同祖先提交对象<code>6d50f6</code>,我们将其合并：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-three-way-merge.png" alt="三路合并"></p>
<p>上图第二行表明此次是通过非快速推进方式合并，我们查看提交对象记录图：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-three-way-merge-graph.png" alt="三路合并提交对象记录图"></p>
<p>结构如图：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-three-way-merge-struc.png" alt="三路合并结构图"></p>
<p>我们发现，三路合并结构是在需要合并的两个分支的最新提交对象的基础上，创建一个新提交对象(4ae14b)，将合并主分支（即执行合并指令时，当前所处分支）的HEAD指针前移指向该提交对象，该提交对象有两个父提交对象，分别为合并前待合并分支的最新提交对象（即b287b8和7a657a）。</p>
<p>关于三路合并需要明确：</p>
<ul>
<li>三路合并其实是一种非快速推进合并方式；</li>
<li>三路合并的前提是两个分支有共同祖先提交对象；</li>
</ul>
<h2 id="分支冲突（conflict）"><a href="#分支冲突（conflict）" class="headerlink" title="分支冲突（conflict）"></a>分支冲突（conflict）</h2><p>在合并分支，不可避免会发生冲突，当我们在两个分支对同一文件同一部分进行不同修改后，发起合并时就会提示有冲突，假设我们有work-b分支，在其基础上切出新分支work-b-1，然后在两分支上分别对README.md文件同一部分进行不同修改并提交，然后将work-b-1分支合并到work-b分支：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-merge-conflict.png" alt="合并时提示冲突"></p>
<p>发现README.md文件有冲突，查看该文件：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-merge-conflict-info.png" alt="查看冲突"></p>
<p>如上图，列出了两个分支的不同修改，HEAD表明当前分支的修改内容，下面是work-b-1分支的修改，我们选择需要保留的内容，删除其他无关信息和内容，然后保存该文件，查看当前状态：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-merge-status.png" alt="查看状态"></p>
<p>根据提示，解决冲突后提交：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-merge-conflict-commit.png" alt="解决冲突"></p>
<h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>对于创建过但并未删除的分支，我们可以查看分支列表，依然使用<code>git branch</code>指令，不传入任何参数：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-list.png" alt="分支列表"></p>
<p>图中列出了所有分支，前面带星号的表示当前分支，当然我们还可以查看指明最新提交信息的分支列表，可以添加<code>-v</code>参数：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-list-details.png" alt="分支详情列表"></p>
<h4 id="筛选分支"><a href="#筛选分支" class="headerlink" title="筛选分支"></a>筛选分支</h4><p>除了可以查看所有分支列表，Git还支持筛选已合并或未合并至当前分支的所有分支：</p>
<ul>
<li><code>--merged</code>参数指明筛选已合并分支；</li>
<li><code>--no-merged</code>参数指明筛选未合并分支。</li>
</ul>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-either-merged.png" alt="筛选分支"></p>
<h2 id="删除分支（git-branch-d）"><a href="#删除分支（git-branch-d）" class="headerlink" title="删除分支（git branch -d）"></a>删除分支（git branch -d）</h2><p>当分支合并入主干后，也许我们不再需要那个分支了，我们需要将其删除，使用指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d 分支名</div></pre></td></tr></table></figure>
<p>之前介绍到使用<code>git branch</code>是创建新分支，而指定<code>-d</code>参数，说明需要删除该分支：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-delete.png" alt="删除分支"></p>
<h2 id="远程分支（remote-branch）"><a href="#远程分支（remote-branch）" class="headerlink" title="远程分支（remote branch）"></a>远程分支（remote branch）</h2><p>我们注意到，前文所讲述的分支都是存在本地的，即本地分支，还需要了解远程分支，如[remote]/[branch]这种形式，表示是远端主机的某分支，<a href="http://blog.codingplayboy.com/2017/03/21/git_remote/" target="_blank" rel="external">关于远端主机详情请查看</a>,其实远程分支和本地分支基本理论概念还是相同的，区别是有些指令不同而已：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b test origin/develop</div></pre></td></tr></table></figure>
<p>以上指令即从远程分支(远端主机origin上的develop分支)切出新的本地分支test分支。</p>
<h4 id="跟踪分支（TRACKING-BRANCH）"><a href="#跟踪分支（TRACKING-BRANCH）" class="headerlink" title="跟踪分支（TRACKING BRANCH）"></a>跟踪分支（TRACKING BRANCH）</h4><p>前文已经介绍了本地分支和远程分支的概念及操作，那么这两类分支之间应该有某种关系将他们关联起来，本地项目都需要与远端主机仓库同步（pull &amp; push）,当我们从一个远程分支切出（创建）一个本地分支时，这个分支就叫跟踪分支（tracking branch）,而远程分支叫上游分支（upstream branch）。</p>
<p>当我们克隆一个远端仓库时，会默认创建一个跟踪分支master，其上游分支就是<code>远端主机别名/master</code>。</p>
<h6 id="创建跟踪分支"><a href="#创建跟踪分支" class="headerlink" title="创建跟踪分支"></a>创建跟踪分支</h6><p>创建跟踪分支指令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b 本地分支名 远端主机别名/远程分支名</div></pre></td></tr></table></figure>
<p>当然也可以不指定分支名，使用远程分支同名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --track 远端主机别名/远程分支名</div></pre></td></tr></table></figure>
<h6 id="修改跟踪关系"><a href="#修改跟踪关系" class="headerlink" title="修改跟踪关系"></a>修改跟踪关系</h6><p>有时候，可能需要为本地分支设置其上游分支，添加<code>-u</code>参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -u 远端主机别名/远程分支名</div></pre></td></tr></table></figure>
<p>以上指令就指明当前分支跟踪某远端主机的远程分支。</p>
<h6 id="查看跟踪分支（git-branch-vv）"><a href="#查看跟踪分支（git-branch-vv）" class="headerlink" title="查看跟踪分支（git branch -vv）"></a>查看跟踪分支（git branch -vv）</h6><p>使用以下指令查看分支的上游分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -vv</div></pre></td></tr></table></figure>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-tracking-branch.png" alt="跟踪分支列表"></p>
<p>上图输出信息第二行表明master分支跟踪远程origin/master分支，ahead 7表明本地有7个提交未推到服务器，其他分支不是跟踪分支，没有上游分支。</p>
<h6 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h6><p>对于不再需要的远程分支，是可以删除的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete test</div></pre></td></tr></table></figure>
<p>以上指令删除远端主机origin的test分支，但是在垃圾回收之前，Git服务器仍然会保留分支数据，我们可以很方便的恢复数据，之后会详细介绍。</p>
<h2 id="变基（rebase）"><a href="#变基（rebase）" class="headerlink" title="变基（rebase）"></a>变基（rebase）</h2><p>Git中有两种方式整合不同分支的修改：第一种是前文介绍的合并（merge），另一种就是本节的主题变基（rebase）。</p>
<p>变基其实与前文提到的三路合并（three-way merge）颇有渊源：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branchs-three-way-merge-struc.png" alt="三路合并结构图"></p>
<p>如图work-a分支与主干master分支合并后，创建一个新提交对象，我们还可以通过变基完成两个分支的修改整合，由于work-a分支已合并到master分支，我们在work-a分支再提交一次修改<code>e0ae7dc</code>,然后我们将work-a分支对master分支进行变基：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-conflict.png" alt="分支变基"></p>
<p>执行变基时，由于两个分支对同一文件同一部分进行了不同修改，会提示冲突，需要解决冲突，我们修改文件解决冲突，然后查看状态：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-conflict-status.png" alt="解决冲突后变基状态"></p>
<p>上图，第一行<code>rebase in progress; onto 4ae14b3</code>说明当前分支针对<code>4ae14b3</code>快照进行变基，第三到第五行分别说明：</p>
<ul>
<li>第三行：解决冲突然后执行<code>git rebase --continue</code>指令继续变基；</li>
<li>第四行：执行<code>git rebase --skip</code>指令，跳过解决冲突；</li>
<li>第五行：执行<code>git rebase --abort</code>指令，终止变基，回到分支变基前状态。</li>
</ul>
<p>下面第6到第八行说明：</p>
<ul>
<li>第七行：使用<code>git reset HEAD &lt;file&gt;</code>指令撤销某文件变更；</li>
<li>第八行：使用<code>git add &lt;file&gt;</code>指令标记冲突为已解决状态。</li>
</ul>
<p>最后一行<code>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code>，说明尚未标记冲突，需要使用指令标记变更，在继续执行变基：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-conflict-continue.png" alt="解决冲突继续变基"></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-graph.png" alt="变基后历史记录图"></p>
<p>如上图，变基后，在主线上创建新提交对象<code>640b83</code>,并修改work-a分支指针指向该提交对象：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-struc.png" alt="变基后结构图"></p>
<p>之后我们可以正常的合并：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-merge.png" alt="变基后合并"></p>
<p>如图，主线分支更新提交对象到<code>640b83a</code>，第二行<code>Fast-forward</code>说明此次合并属于快速推进合并方式，结构如下：</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/git-branch-rebase-merge-struc.png" alt="变基合并后结构图"></p>
<h4 id="三路合并与变基"><a href="#三路合并与变基" class="headerlink" title="三路合并与变基"></a>三路合并与变基</h4><p>基于上例，三路合并，整合修改变更后会保留分支的原始提交记录，新创建提交对象有两个父提交对象，一个在主线上，一个在待合并分支上；而变基则不能保留待合并分支的原始提交记录，主线上新建的提交对象只有一个位于主线上的父提交对象。更多变基相关内容计划单独出文介绍。</p>
<p>至于到底选用哪种方式整合变更，变基还是合并，这个一直有争论，没有哪一种方式绝对合理，我们只需要把握一个原则：无论变基还是合并，你应该只操作本地历史记录，任何已经推到服务器并入主干的内容和提交历史不应该更改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几乎所有的版本控制系统都以分支的方式进行操作，分支是独立于项目主线的一条支线，我们可以在不影响主线代码的情况下，在分支下进行工作。对于传统的一些版本控制工具来说，我们通常需要花费比较多的时间拷贝主线代码，创建一个分支，并且对分支的管理效率也越来越不令人满意，而如今备受推崇的
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat组成与工作原理</title>
    <link href="http://yoursite.com/2017/04/10/tomcat-principle/"/>
    <id>http://yoursite.com/2017/04/10/tomcat-principle/</id>
    <published>2017-04-10T14:44:00.000Z</published>
    <updated>2017-04-10T14:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tomcat是什么"><a href="#Tomcat是什么" class="headerlink" title="Tomcat是什么"></a>Tomcat是什么</h2><blockquote>
<p>开源的 Java Web 应用服务器，实现了 Java EE(Java Platform Enterprise Edition)的部 分技术规范，比如 Java Servlet、Java Server Page、JSTL、Java WebSocket。Java EE 是 Sun 公 司为企业级应用推出的标准平台，定义了一系列用于企业级开发的技术规范，除了上述的之外，还有 EJB、Java Mail、JPA、JTA、JMS 等，而这些都依赖具体容器的实现。</p>
</blockquote>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/dfcfa4209ace11657440.jpeg" alt=""></p>
<p>上图对比了 Java EE 容器的实现情况，Tomcat 和 Jetty 都只提供了 Java Web 容器必需的 Servlet 和 JSP 规范，开发者要想实现其他的功能，需要自己依赖其他开源实现。</p>
<p>Glassfish 是由 sun 公司推出，Java EE 最新规范出来之后，首先会在 Glassfish 上进行实 现，所以是研究 Java EE 最新技术的首选。</p>
<p>最常见的情况是使用 Tomcat 作为 Java Web 服务器，使用 Spring 提供的开箱即用的强大 的功能，并依赖其他开源库来完成负责的业务功能实现。</p>
<h2 id="Servlet容器"><a href="#Servlet容器" class="headerlink" title="Servlet容器"></a>Servlet容器</h2><p><strong>Tomcat 组成如下图</strong>：<br>主要有 Container 和 Connector 以及相关组件构成。</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/9ccc3ed9de0df39faa1e.jpeg" alt=""></p>
<p><strong>Server</strong>：指的就是整个 Tomcat 服 务器，包含多组服务，负责管理和 启动各个 Service，同时监听 8005 端口发过来的 shutdown 命令，用 于关闭整个容器 ；</p>
<p><strong>Service</strong>：Tomcat 封装的、对外提 供完整的、基于组件的 web 服务， 包含 Connectors、Container 两个 核心组件，以及多个功能组件，各 个 Service 之间是独立的，但是共享 同一 JVM 的资源 ；</p>
<p><strong>Connector</strong>：Tomcat 与外部世界的连接器，监听固定端口接收外部请求，传递给 Container，并 将 Container 处理的结果返回给外部；</p>
<p><strong>Container</strong>：Catalina，Servlet 容器，内部有多层容器组成，用于管理 Servlet 生命周期，调用 servlet 相关方法。</p>
<p><strong>Loader</strong>：封装了 Java ClassLoader，用于 Container 加载类文件； Realm：Tomcat 中为 web 应用程序提供访问认证和角色管理的机制；</p>
<p><strong>JMX</strong>：Java SE 中定义技术规范，是一个为应用程序、设备、系统等植入管理功能的框架，通过 JMX 可以远程监控 Tomcat 的运行状态；</p>
<p><strong>Jasper</strong>：Tomcat 的 Jsp 解析引擎，用于将 Jsp 转换成 Java 文件，并编译成 class 文件。 Session：负责管理和创建 session，以及 Session 的持久化(可自定义)，支持 session 的集<br>群。</p>
<p><strong>Pipeline</strong>：在容器中充当管道的作用，管道中可以设置各种 valve(阀门)，请求和响应在经由管 道中各个阀门处理，提供了一种灵活可配置的处理请求和响应的机制。</p>
<p><strong>Naming</strong>：命名服务，JNDI， Java 命名和目录接口，是一组在 Java 应用中访问命名和目录服务的 API。命名服务将名称和对象联系起来，使得我们可以用名称访问对象，目录服务也是一种命名 服务，对象不但有名称，还有属性。Tomcat 中可以使用 JNDI 定义数据源、配置信息，用于开发 与部署的分离。</p>
<p><strong>Container组成</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1a2613edf5779c7bf184.jpeg" alt=""></p>
<p>Engine：Servlet 的顶层容器，包含一 个或多个 Host 子容器；<br>Host：虚拟主机，负责 web 应用的部 署和 Context 的创建；<br>Context：Web 应用上下文，包含多个 Wrapper，负责 web 配置的解析、管 理所有的 Web 资源；<br>Wrapper：最底层的容器，是对 Servlet 的封装，负责 Servlet 实例的创 建、执行和销毁。</p>
<p><strong>生命周期管理</strong><br>Tomcat 为了方便管理组件和容器的生命周期，定义了从创建、启动、到停止、销毁共 12 中状态，tomcat 生命周期管理了内部状态变化的规则控制，组件和容器只需实现相应的生命周期 方法即可完成各生命周期内的操作(initInternal、startInternal、stopInternal、 destroyInternal)；</p>
<p>比如执行初始化操作时，会判断当前状态是否 New，如果不是则抛出生命周期异常；是的 话则设置当前状态为 Initializing，并执行 initInternal 方法，由子类实现，方法执行成功则设置当 前状态为 Initialized，执行失败则设置为 Failed 状态；</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/75e7563785c89a252f3f.jpeg" alt=""></p>
<p>Tomcat 的生命周期管理引入了事件机制，在组件或容器的生命周期状态发生变化时会通 知事件监听器，监听器通过判断事件的类型来进行相应的操作。<br>事件监听器的添加可以在 server.xml 文件中进行配置;</p>
<p>Tomcat 各类容器的配置过程就是通过添加 listener 的方式来进行的，从而达到配置逻辑与 容器的解耦。如 EngineConfig、HostConfig、ContextConfig。<br>EngineConfig：主要打印启动和停止日志<br>HostConfig：主要处理部署应用，解析应用 META-INF/context.xml 并创建应用的 Context ContextConfig：主要解析并合并 web.xml，扫描应用的各类 web 资源 (filter、servlet、listener)</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/1ea5e727c9ad4ca37e05.jpeg" alt=""></p>
<p><strong>Tomcat 的启动过程</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/94989563f76b0c2b6b19.jpeg" alt=""></p>
<p>启动从 Tomcat 提供的 start.sh 脚本开始，shell 脚本会调用 Bootstrap 的 main 方法，实际 调用了 Catalina 相应的 load、start 方法。</p>
<p>load 方法会通过 Digester 进行 config/server.xml 的解析，在解析的过程中会根据 xml 中的关系 和配置信息来创建容器，并设置相关的属性。接着 Catalina 会调用 StandardServer 的 init 和 start 方法进行容器的初始化和启动。</p>
<p>按照 xml 的配置关系，server 的子元素是 service，service 的子元素是顶层容器 Engine，每层容器有持有自己的子容器，而这些元素都实现了生命周期管理 的各个方法，因此就很容易的完成整个容器的启动、关闭等生命周期的管理。</p>
<p>StandardServer 完成 init 和 start 方法调用后，会一直监听来自 8005 端口(可配置)，如果接收 到 shutdown 命令，则会退出循环监听，执行后续的 stop 和 destroy 方法，完成 Tomcat 容器的 关闭。同时也会调用 JVM 的 Runtime.getRuntime()﴿.addShutdownHook 方法，在虚拟机意外退 出的时候来关闭容器。</p>
<p>所有容器都是继承自 ContainerBase，基类中封装了容器中的重复工作，负责启动容器相关的组 件 Loader、Logger、Manager、Cluster、Pipeline，启动子容器(线程池并发启动子容器，通过 线程池 submit 多个线程，调用后返回 Future 对象，线程内部启动子容器，接着调用 Future 对象 的 get 方法来等待执行结果)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">List&lt;Future&lt;Void&gt;&gt; results = new ArrayList&lt;Future&lt;Void&gt;&gt;();</div><div class="line">for (int i = 0; i &lt; children.length; i++) &#123;</div><div class="line">    results.add(startStopExecutor.submit(new StartChild(children[i])));</div><div class="line">&#125;</div><div class="line">boolean fail = false;</div><div class="line">for (Future&lt;Void&gt; result ： results) &#123;</div><div class="line">    try &#123;</div><div class="line">        result.get();</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        log.error(sm.getString(&quot;containerBase.threadedStartFailed&quot;)， e);</div><div class="line">        fail = true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Web 应用的部署方式</strong><br>注：catalina.home：安装目录;catalina.base：工作目录;默认值 user.dir</p>
<ul>
<li>Server.xml 配置 Host 元素，指定 appBase 属性，默认\$catalina.base/webapps/</li>
<li>Server.xml 配置 Context 元素，指定 docBase，元素，指定 web 应用的路径</li>
<li>自定义配置：在\$catalina.base/EngineName/HostName/XXX.xml 配置 Context 元素</li>
</ul>
<p>HostConfig 监听了 StandardHost 容器的事件，在 start 方法中解析上述配置文件：</p>
<ul>
<li>扫描 appbase 路径下的所有文件夹和 war 包，解析各个应用的 META-INF/context.xml，并 创建 StandardContext，并将 Context 加入到 Host 的子容器中。</li>
<li>解析$catalina.base/EngineName/HostName/下的所有 Context 配置，找到相应 web 应 用的位置，解析各个应用的 META-INF/context.xml，并创建 StandardContext，并将 Context 加入到 Host 的子容器中。</li>
</ul>
<p>注：</p>
<ul>
<li>HostConfig 并没有实际解析 Context.xml，而是在 ContextConfig 中进行的。</li>
<li>HostConfig 中会定期检查 watched 资源文件(context.xml 配置文件)</li>
</ul>
<p>ContextConfig 解析 context.xml 顺序：</p>
<ul>
<li>先解析全局的配置 config/context.xml</li>
<li>然后解析 Host 的默认配置 EngineName/HostName/context.xml.default</li>
<li>最后解析应用的 META-INF/context.xml</li>
</ul>
<p>ContextConfig 解析 web.xml 顺序：</p>
<ul>
<li>先解析全局的配置 config/web.xml</li>
<li>然后解析 Host 的默认配置 EngineName/HostName/web.xml.default 接着解析应用的 MEB-INF/web.xml</li>
<li>扫描应用 WEB-INF/lib/下的 jar 文件，解析其中的 META-INF/web-fragment.xml 最后合并 xml 封装成 WebXml，并设置 Context</li>
</ul>
<p>注：</p>
<ul>
<li>扫描 web 应用和 jar 中的注解(Filter、Listener、Servlet)就是上述步骤中进行的。</li>
<li>容器的定期执行：backgroundProcess，由 ContainerBase 来实现的，并且只有在顶层容器 中才会开启线程。(backgroundProcessorDelay=10 标志位来控制)</li>
</ul>
<p><strong>Servlet 生命周期</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/8e9e24820d15b183300b.jpeg" alt=""></p>
<p>Servlet 是用 Java 编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>
<ol>
<li>请求到达 server 端，server 根据 url 映射到相应的 Servlet</li>
<li>判断 Servlet 实例是否存在，不存在则加载和实例化 Servlet 并调用 init 方法</li>
<li>Server 分别创建 Request 和 Response 对象，调用 Servlet 实例的 service 方法(service 方法 内部会根据 http 请求方法类型调用相应的 doXXX 方法)</li>
<li>doXXX 方法内为业务逻辑实现，从 Request 对象获取请求参数，处理完毕之后将结果通过 response 对象返回给调用方</li>
<li>当 Server 不再需要 Servlet 时(一般当 Server 关闭时)，Server 调用 Servlet 的 destroy() 方 法。</li>
</ol>
<p>load on startup</p>
<p>当值为 0 或者大于 0 时，表示容器在应用启动时就加载这个 servlet; 当是一个负数时或者没有指定时，则指示容器在该 servlet 被选择时才加载; 正数的值越小，启动该 servlet 的优先级越高;</p>
<p>single thread model</p>
<p>每次访问 servlet，新建 servlet 实体对象，但并不能保证线程安全，同时 tomcat 会限制 servlet 的实例数目<br>最佳实践：不要使用该模型，servlet 中不要有全局变量</p>
<p><strong>请求处理过程 </strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/36a5730697cd0e18a7f5.png" alt=""></p>
<ol>
<li>根据 server.xml 配置的指定的 connector 以及端口监听 http、或者 ajp 请求</li>
<li>请求到来时建立连接,解析请求参数,创建 Request 和 Response 对象,调用顶层容器 pipeline 的 invoke 方法</li>
<li>容器之间层层调用,最终调用业务 servlet 的 service 方法</li>
<li>Connector 将 response 流中的数据写到 socket 中</li>
</ol>
<p><strong>Pipeline 与 Valve </strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/76ce4dd2ecb33beabdbd.png" alt=""></p>
<p>Pipeline 可以理解为现实中的管道,Valve 为管道中的阀门,Request 和 Response 对象在管道中 经过各个阀门的处理和控制。</p>
<p>每个容器的管道中都有一个必不可少的 basic valve,其他的都是可选的,basic valve 在管道中最 后调用,同时负责调用子容器的第一个 valve。</p>
<p>Valve 中主要的三个方法:setNext、getNext、invoke;valve 之间的关系是单向链式结构,本身 invoke 方法中会调用下一个 valve 的 invoke 方法。</p>
<p>各层容器对应的 basic valve 分别是 StandardEngineValve、StandardHostValve、 StandardContextValve、StandardWrapperValve。</p>
<h2 id="JSP引擎"><a href="#JSP引擎" class="headerlink" title="JSP引擎"></a>JSP引擎</h2><p><img src="http://oo77gy3uq.bkt.clouddn.com/ad68a0bd4000a898060e.png" alt=""></p>
<p><strong>JSP 生命周期</strong></p>
<ul>
<li>编译阶段:servlet 容器编译 servlet 源文<br>  件,生成 servlet 类</li>
<li>初始化阶段:加载与 JSP 对应的 servlet 类, 创建其实例,并调用它的初始化方法</li>
<li>执行阶段:调用与 JSP 对应的 servlet 实例的 服务方法</li>
<li>销毁阶段:调用与 JSP 对应的 servlet 实例的 销毁方法,然后销毁 servlet 实例</li>
</ul>
<p><strong>JSP元素</strong><br>代码片段：<br>JSP声明：<br>JSP表达式：<br>JSP注释：<br>JSP指令：<br>JSP行为：<br>HTML元素： html/head/body/div/p/…<br>JSP隐式对象：request、response、out、session、application、config、<br>pageContext、page、Exception</p>
<p><strong>JSP 元素说明</strong><br>代码片段:包含任意量的 Java 语句、变量、方法或表达式;<br>JSP 声明:一个声明语句可以声明一个或多个变量、方法,供后面的 Java 代码使用;<br>JSP 表达式:输出 Java 表达式的值,String 形式;<br>JSP 注释:为代码作注释以及将某段代码注释掉<br>JSP 指令:用来设置与整个 JSP 页面相关的属性,<br>定义页面的依赖属性,比如 language、contentType、errorPage、 isErrorPage、import、isThreadSafe、session 等等<br>包含其他的 JSP 文件、HTML 文件或文本文件,是该 JSP 文件的一部分,会 被同时编译执行<br>引入标签库的定义,可以是自定义标签<br>JSP 行为:jsp:include、jsp:useBean、jsp:setProperty、jsp:getProperty、jsp:forward</p>
<p><strong>Jsp 解析过程 </strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/72e3e39e2218baccab31.png" alt=""></p>
<ul>
<li>代码片段:在_jspService()方法内直接输出</li>
<li>JSP 声明: 在 servlet 类中进行输出</li>
<li>JSP 表达式:在_jspService()方法内直接输出</li>
<li>JSP 注释:直接忽略,不输出</li>
<li>JSP 指令:根据不同指令进行区分,include:对引入的文件进行解析;page 相关的属性会做为 JSP 的属性,影响的是解析和请求处理时的行为</li>
<li>JSP 行为:不同的行为有不同的处理方式,jsp:useBean 为例,会从 pageContext 根据 scope 的 类别获取 bean 对象,如果没有会创建 bean,同时存到相应 scope 的 pageContext 中</li>
<li>HTML:在_jspService()方法内直接输出</li>
<li>JSP 隐式对象:在_jspService()方法会进行声明,只能在方法中使用;</li>
</ul>
<h2 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h2><p><img src="http://oo77gy3uq.bkt.clouddn.com/edd423fe65e74312df50.png" alt=""></p>
<p>Http:HTTP 是超文本传输协议,是客户端浏览器或其他程序与 Web 服务器之间的应用层通信协 议<br>AJP:Apache JServ 协议(AJP)是一种二进制协议,专门代理从 Web 服务器到位于后端的应用 程序服务器的入站请求<br><strong>阻塞 IO</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/23ec3d5eb0c760ea277f.png" alt=""></p>
<p><strong>非阻塞 IO</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/344773ecc6b8e38b8892.png" alt=""></p>
<p><strong>IO多路复用</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/c5b59386908b65c3fcad.png" alt=""></p>
<p>阻塞与非阻塞的区别在于进行读操作和写操作的系统调用时，如果此时内核态没有数据可读或者没有缓冲空间可写时，是否阻塞。</p>
<p>IO多路复用的好处在于可同时监听多个socket的可读和可写事件，这样就能使得应用可以同时监听多个socket，释放了应用线程资源。</p>
<p><strong>Tomcat各类Connector对比</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/9123bf19b3402b447bed.jpeg" alt=""></p>
<p>Connector的实现模式有三种，分别是BIO、NIO、APR，可以在server.xml中指定。</p>
<ul>
<li>JIO：用java.io编写的TCP模块，阻塞IO</li>
<li>NIO：用java.nio编写的TCP模块，非阻塞IO，（IO多路复用）</li>
<li>APR：全称Apache Portable Runtime，使用JNI的方式来进行读取文件以及进行网络传输</li>
</ul>
<p>Apache Portable Runtime是一个高度可移植的库，它是Apache HTTP Server 2.x的核心。 APR具有许多用途，包括访问高级IO功能（如sendfile，epoll和OpenSSL），操作系统级功能（随机数生成，系统状态等）和本地进程处理（共享内存，NT管道和Unix套接字）。</p>
<p>表格中字段含义说明：</p>
<ul>
<li>Support Polling：是否支持基于IO多路复用的socket事件轮询</li>
<li>Polling Size：轮询的最大连接数</li>
<li>Wait for next Request：在等待下一个请求时，处理线程是否释放，BIO是没有释放的，所以在keep-alive=true的情况下处理的并发连接数有限</li>
<li>Read Request Headers：由于request header数据较少，可以由容器提前解析完毕，不需要阻塞</li>
<li>Read Request Body：读取request body的数据是应用业务逻辑的事情，同时Servlet的限制，是需要阻塞读取的</li>
<li>Write Response：跟读取request body的逻辑类似，同样需要阻塞写</li>
</ul>
<p><strong>NIO处理相关类</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/36ca2efea0d5318dc6d1.jpeg" alt=""></p>
<p>Acceptor线程负责接收连接，调用accept方法阻塞接收建立的连接，并对socket进行封装成PollerEvent，指定注册的事件为op_read，并放入到EventQueue队列中，PollerEvent的run方法逻辑的是将Selector注册到socket的指定事件；</p>
<p>Poller线程从EventQueue获取PollerEvent，并执行PollerEvent的run方法，调用Selector的select方法，如果有可读的Socket则创建Http11NioProcessor，放入到线程池中执行；</p>
<p>CoyoteAdapter是Connector到Container的适配器，Http11NioProcessor调用其提供的service方法，内部创建Request和Response对象，并调用最顶层容器的Pipeline中的第一个Valve的invoke方法</p>
<p>Mapper主要处理http url 到servlet的映射规则的解析，对外提供map方法</p>
<p><strong>NIO Connector主要参数</strong></p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/6a25927b428e2e6db858.jpeg" alt=""></p>
<h2 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h2><p>Comet是一种用于web的推送技术，能使服务器实时地将更新的信息传送到客户端，而无须客户端发出请求<br>在WebSocket出来之前，如果不适用comet，只能通过浏览器端轮询Server来模拟实现服务器端推送。<br>Comet支持servlet异步处理IO，当连接上数据可读时触发事件，并异步写数据(阻塞)</p>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/030676ad4f439effcd6f.jpeg" alt=""></p>
<p>Tomcat要实现Comet，只需继承HttpServlet同时，实现CometProcessor接口</p>
<ul>
<li>Begin：新的请求连接接入调用，可进行与Request和Response相关的对象初始化操作，并保存response对象，用于后续写入数据</li>
<li>Read：请求连接有数据可读时调用</li>
<li>End：当数据可用时，如果读取到文件结束或者response被关闭时则被调用</li>
<li>Error：在连接上发生异常时调用，数据读取异常、连接断开、处理异常、socket超时</li>
</ul>
<p>Note：</p>
<ul>
<li>Read：在post请求有数据，但在begin事件中没有处理，则会调用read，如果read没有读取数据，在会触发Error回调，关闭socket</li>
<li>End：当socket超时，并且response被关闭时也会调用；server被关闭时调用</li>
<li>Error：除了socket超时不会关闭socket，其他都会关闭socket</li>
<li>End和Error时间触发时应关闭当前comet会话，即调用CometEvent的close方法<br>  Note：在事件触发时要做好线程安全的操作</li>
</ul>
<h2 id="异步Servlet"><a href="#异步Servlet" class="headerlink" title="异步Servlet"></a>异步Servlet</h2><p><img src="http://oo77gy3uq.bkt.clouddn.com/11e26c65a2cdc42e8f05.png" alt=""></p>
<p>传统流程：</p>
<ul>
<li>首先，Servlet 接收到请求之后，request数据解析；</li>
<li>接着，调用业务接口的某些方法，以完成业务处理；</li>
<li>最后，根据处理的结果提交响应，Servlet 线程结束</li>
</ul>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/7c352f6a0239331ec91f.png" alt=""></p>
<p>异步处理流程：</p>
<ul>
<li>客户端发送一个请求</li>
<li>Servlet容器分配一个线程来处理容器中的一个servlet</li>
<li>servlet调用request.startAsync()，保存AsyncContext, 然后返回</li>
<li>任何方式存在的容器线程都将退出，但是response仍然保持开放</li>
<li>业务线程使用保存的AsyncContext来完成响应（线程池）</li>
<li>客户端收到响应</li>
</ul>
<p>Servlet 线程将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，此时 Servlet 还没有生成响应数据，异步线程处理完业务以后，可以直接生成响应数据（异步线程拥有 ServletRequest 和 ServletResponse 对象的引用）</p>
<p><strong>为什么web应用中支持异步？</strong></p>
<p>推出异步，主要是针对那些比较耗时的请求：比如一次缓慢的数据库查询，一次外部REST API调用, 或者是其他一些I/O密集型操作。这种耗时的请求会很快的耗光Servlet容器的线程池，继而影响可扩展性。</p>
<p>Note：从客户端的角度来看，request仍然像任何其他的HTTP的request-response交互一样，只是耗费了更长的时间而已</p>
<p><strong>异步事件监听</strong></p>
<ul>
<li>onStartAsync：Request调用startAsync方法时触发</li>
<li>onComplete：syncContext调用complete方法时触发</li>
<li>onError：处理请求的过程出现异常时触发</li>
<li>onTimeout：socket超时触发</li>
</ul>
<p>Note :<br>onError/ onTimeout触发后，会紧接着回调onComplete<br>onComplete 执行后，就不可再操作request和response</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tomcat是什么&quot;&gt;&lt;a href=&quot;#Tomcat是什么&quot; class=&quot;headerlink&quot; title=&quot;Tomcat是什么&quot;&gt;&lt;/a&gt;Tomcat是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;开源的 Java Web 应用服务器，实现了 Java E
    
    </summary>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 集群实现源码级别剖析</title>
    <link href="http://yoursite.com/2017/04/10/tomcat-cluster/"/>
    <id>http://yoursite.com/2017/04/10/tomcat-cluster/</id>
    <published>2017-04-10T00:56:00.000Z</published>
    <updated>2017-04-10T01:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着互联网快速发展，各种各样供外部访问的系统越来越多且访问量越来越大，以前Web容器可以包揽接收-逻辑处理-响应整个请求生命周期的工作，现在为了构建让更多用户访问更强大的系统，人们通过不断地业务解耦、架构解耦将web容器的逻辑处理抽离交由其他中间件处理，例如缓存中间件、消息队列中间件、数据存储中间件等等。Web容器负责的工作可能越来越少，但是它确实必不可少的部分，它负责接收用户请求并分别调用各个服务最后响应。可以说目前最受欢迎的web容器是用Java写的tomcat小猫，由于生产上的tomcat考虑负载均衡及高可用性，它一般以集群模式运行，所以这篇文章主要探讨的是tomcat的集群功能如何实现且生产部署如何选型。</p>
<p>如果说一个web应用不涉及会话的话，那么做集群是相当简单的，因为节点都是无状态的，集群内各个节点无需互相通信，只需要将各个请求均匀分配到集群节点即可。但基本所有web应用都会使用会话机制，所以做web应用集群时整个难点在于会话数据的同步，当然你可以通过一些策略规避复杂的额数据同步操作，例如把会话信息保存在分布式缓存或数据库中统一集中管理，避免了tomcat集群之间的通信。但这种方式也有不足，要额外引入数据库或缓存服务，同时也要保证它们的高可用性，增加了机器和维护成本。本文假设不使用统一管理会话的模式而是将会话交由tomcat自身集群管理。</p>
<h2 id="集群增量会话管理器——DeltaManager"><a href="#集群增量会话管理器——DeltaManager" class="headerlink" title="集群增量会话管理器——DeltaManager"></a>集群增量会话管理器——DeltaManager</h2><p>tomcat集群节点自身完成各自的数据同步，不管访问到哪个节点都能找到对应的会话，如下图，客户端第一次访问生成会话，tomcat自身会将会话增量信息同步到其他节点上，而且是每次请求完成都会同步此次请求过程中对session的所有操作，这样一来下一次请求到集群中任意节点都能找到响应的会话信息，且能保证信息的及时性。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/a9b44bc2c80c51ff2c9b" alt=""></p>
<p>这就是tomcat默认的集群会话管理器——DeltaManager。它主要用于集群中各个节点之间会话状态的同步维护。DeltaManager的职责是将某节点的会话该变同步到集群内其他成员节点上，它属于全节点复制模式，所谓全节点复制是指集群中某个节点的状态变化后需要同步到集群中剩余的节点，非全节点方式可能只是同步到其中某个或若干节点。在集群中全节点会话复制的一个大致步骤如下图所示，客户端发起一个请求，假设通过一定的负载均衡设备分发策略分到其中一个结点node1，如果还未存在session对象的话web容器将会创建一个会话对象，接着执行一些逻辑处理，在对客户端响应之前有个重要的事情是要把session对象同步到集群中其他节点上，最后再响应客户端。当客户端第二次发起请求时，假如分发到node3节点上，由于同步了node1的session会话，所以在执行逻辑时并不会取不到session的值。如果删除某个会话对象则要同时通知其他节点把相应会话删除，如果修改了某个会话的某些属性也同样要更新到其他节点的会话中。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/a3295de3966d8aaa3a6e" alt=""></p>
<p>DeltaManager其实就是一个会话同步通信解决方案，除了具备上面提到的全节点复制外，它还有具有只复制会话增量的特性，增量是以一个完整请求为周期，即会将一个请求过程中所有会话修改量在响应前进行集群同步。往下看Tomcat具体实现方案。</p>
<p>为区分不同的动作必须要先定义好各种事件，例如会话创建事件、会话访问事件、会话失效事件、获取所有会话事件、会话增量事件、会话ID改变事件等等，实际上tomcat集群会有9种事件，集群根据这些不同的事件就可以彼此进行通信，接收方对不同事件做不同的操作。如下图，例如node1节点创建完一个会话后，即向其他三个节点发送EVT_SESSION_CREATED事件，其他三个节点接收到此事件后则各自在自己本地创建一个会话，会话包含了两个很重要的属性——会话ID和创建时间，这两个属性都必须由node1节点跟着EVT_SESSION_CREATED一起发送出去，本地会话创建成功后即完成了会话创建同步工作，此时你通过会话ID查找集群中任意一个节点都可以找到对应的会话。同样对于会话访问事件，node1向其他节点发送EVT_SESSION_ACCESSED事件及会话ID，其他节点根据会话ID找到对应会话并更新会话最后访问时间，以免被认为是过期会话而被清理。类似的还有会话失效事件（同步集群销毁某会话）、会话ID改变事件（同步集群更改会话ID）等等操作。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/556abf9fe7d1f6858aec" alt=""></p>
<p>Tomcat使用SessionMessageImpl类定义了各种集群通信事件及操作方法，在整个集群通信过程中就是按照此类定义好的事件进行通信，SessionMessageImpl包含的事件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">EVT_SESSION_CREATED、</div><div class="line">EVT_SESSION_EXPIRED、</div><div class="line">EVT_SESSION_ACCESSED、</div><div class="line">EVT_GET_ALL_SESSIONS、</div><div class="line">EVT_SESSION_DELTA、</div><div class="line">EVT_ALL_SESSION_DATA、</div><div class="line">EVT_ALL_SESSION_TRANSFERCOMPLETE、</div><div class="line">EVT_CHANGE_SESSION_ID、</div><div class="line">EVT_ALL_SESSION_NOCONTEXTMANAGER </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>，除此之外它继承了序列化接口（方便序列化）、集群消息接口（集群的操作）、会话消息接口（事件定义及会话操作）。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/7d3ad124d7eb4283a1b1" alt=""></p>
<p>集群增量会话管理器DeltaManager可以说是通过SessionMessageImpl消息来管理DeltaSession，即根据SessionMessageImpl里面的事件响应不同的操作。DeltaManager存在一个messageDataReceived(ClusterMessage cmsg)方法，此方法会在本节点接收到其他节点发送过来的消息后被调用，且传入的参数为ClusterMessage类型，可转化为SessionMessage类型，然后根据SessionMessage定义的9种事件做不同处理。其中有一个事件需要关注的是EVT_SESSION_DELTA，它是对会话增量同步处理的事件，某个节点在一个完整的请求过程中对某会话相关属性的所有操作被抽象到了DeltaRequest对象中，而DeltaRequest被序列化后会放到SessionMessage中，所以EVT_SESSION_DELTA事件处理逻辑就是从SessionMessage获取并反序列化出DeltaRequest对象，再将DeltaRequest包含的对某个会话的所有操作同步到本地该会话中，至此完成会话增量同步。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/f25aeb27f76ea5f59158" alt=""></p>
<p>总的来说DeltaManager就是DeltaSession的管理器，它提供了会话增量的同步方式而不是全量同步，极大提高了同步效率。</p>
<h2 id="集群备份会话管理器——BackupManager"><a href="#集群备份会话管理器——BackupManager" class="headerlink" title="集群备份会话管理器——BackupManager"></a>集群备份会话管理器——BackupManager</h2><p>全节点复制的网络流量随节点数量增加呈平方趋势增长，也正是因为这个因素导致无法构建较大规模的集群，为了使集群节点能更加大，首要解决的就是数据复制时流量增长的问题，于是tomcat提出了另外一种会话管理方式，每个会话只会有一个备份，它使会话备份的网络流量随节点数量的增加呈线性趋势增长，大大减少了网络流量和逻辑操作，可构建较大的集群。</p>
<p>下面看看这种方式具体的工作机制，集群一般是通过负载均衡对外提供整体服务，所有节点被隐藏在后端组成一个整体。前面各种模式的实现都无需负载均衡协助，所以图中都把负载均衡省略了。最常见的负载方式是前面用apache拖所有节点，它支持将类似“326257DA6DB76F8D2E38F2C4540D1DEA.tomcat1”的会话id进行分解，定位到tomcat集群中以tomcat1命名的节点上（这种方式称为Session Stick，由apache jk模块实现）。</p>
<p>每个会话存在一个原件和一个备份，且备份与原件不会保存在同一个节点上，如下图，例如当客户端发起请求后通过负载均衡被分发到tomcat1实例节点上，生成一个包含.tomcat1后缀的会话标识，并且tomcat1节点根据一定策略选出此次会话对象备份的节点，然后将包含了{会话id，备份ip}的信息发送给tomcat2、tomcat3、tomcat4，如图中虚线所示，这样每个节点都有一个会话id、备份ip列表，即每个节点都有每个会话的备份ip地址。</p>
<p>完成上面一步后就是将会话内容备份到备份节点上，假如tomcat1的s1、s2两个会话的备份地址为tomcat2，则把会话对象备份到tomcat2中，类似的有tomcat2把s3会话备份到tomcat4，tomcat4把s4、s5两个对话备份到tomcat3，这样集群中所有的会话都已经有了一份备份。当tomcat1一直不出故障，由于Session Stick技术客户端将一直访问到tomcat1节点上，保证一直能获取到会话。而当tomcat1出故障了，这时tomcat也提供了一个failover机制，apache感知到后端集群tomcat1节点被移除了，这时它会把请求随机分配到其他任意节点上，接下去会有两种情况：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/b178398c32fb99aff138" alt=""></p>
<ul>
<li>刚好分到了备份节点tomcat2上，此时仍能获取到s1会话，除此之外，tomcat2还要另外做的事是将这个s1会话标记为原件且继续选取一个备份地址备份s1会话，这样一来又有了备份。</li>
<li>假如分到了非备份节点tomcat3，此时肯定找不到s1会话，于是它将向集群所有节点发问，“请问谁有s1会话的备份ip地址信息？”，因为只有tomcat2有s1的备份地址信息，它接收到询问后应答告知tomcat3节点s1会话的备份在tomcat2，根据这个信息就能查到s1会话了，并且tomcat3在自己本地生成s1会话并标为原件，tomcat2上的副本不变，这样一来同样能找到s1会话，正常完整整个请求处理。</li>
</ul>
<p>接着分析Tomcat对上面机制详细的实现，正常情况下为了支持高效的并发操作，tomcat的所有会话集使用ConcurrentHashMap结构保存，String类型是指SessionId，MapEntry则是对session、源节点成员及备份节点等的封装（详细的类结构如下图所示，备份节点虽然为数组类型，但实际情况我们只会设置一个备份节点），一般session对象由哪个节点生成则哪个节点为源节点，备份节点则为集群中其他任意一节点，所以MapEntry可以看成是包含了源节点和备份节点信息的会话对象。会话管理器其实就是对会话集操作的封装，从设计角度看，为了改变会话集的操作行为，只需继承ConcurrentHashMap类并重写其中一些方法即可实现，例如put、get、remove等等操作实现跨节点操作。于是tomcat的BackupManager对整个会话集的跨节点操作被封装到一个继承ConcurrentHashMap类的LazyReplicatedMap子类中，而要实现跨节点的操作要做的事很多，例如备份节点列表的维护、备份节点选择、通信协议、序列化&amp;反序列化及复杂的IO操作等等，弄清楚了LazyReplicatedMap的工作原理也就基本清楚BackupManager如何工作。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/2057f1bf22f7d2a46416" alt=""></p>
<p>每个节点都要维护一份集群节点信息列表供会话备份路由选择，信息列表的维护主要通过启动时向所有节点广播节点信息及心跳去维护，如下图左，n1启动时向其他节点广播自己的信息，其他节点收到信息后把n1添加到自己的列表，而n1则把n2、n3、n4添加到自己的列表，接着按某一时间间隔继续向其他节点发心跳，如下图右，假如n2未给n1响应信息，n1则把n2从自己的列表中删除。BackupManager使用经典的Round robin算法用于备份节点的选择，它属于平均分配算法，按顺序依次选择节点，例如集群一共有node1、node2、node3三个节点，node1将session1备份到node2，而session2则备份到node3。对于节点信息列表BackupManager是使用HashMap结构保存，Member是包含了节点信息属性的节点抽象，Long是指节点最新的存活时间，在做心跳时就是根据最新的存活时间和超时阀值判断节点是否失效。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/3f6783cb34ab87bcc945" alt=""></p>
<p>通信的协议及信息载体由MapMessage类定义，通信协议其实就是通信双方约定好的语义，定义的常量包括</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">MSG_BACKUP、</div><div class="line">MSG_RETRIEVE_BACKUP、</div><div class="line">MSG_PROXY、</div><div class="line">MSG_REMOVE、</div><div class="line">MSG_STATE、</div><div class="line">MSG_START、</div><div class="line">MSG_STOP、</div><div class="line">MSG_INIT、</div><div class="line">MSG_COPY、</div><div class="line">MSG_STATE_COPY、</div><div class="line">MSG_ACCESS</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>，这里每个值都代表一个语义，例如MSG_BACKUP表示让接收方把接收到的会话对象进行备份、MSG_REMOVE则表示让接收方按照接收到的会话id把对应的会话删除等等。除此之外MapMessage类还包含valuedata(byte[])、keydata(byte[])、nodes(Member[])、primary(Member)，分别表示会话对象字节流、会话id字节流、备份节点、源节点。这样一来所有要素都有了，在备份操作中MapMessage对象就像组成一个句子：“本人会话id为keydata，会话值为valuedata，我的源节点为primary，我现在需要做备份操作”。</p>
<p>另外，序列化&amp;反序列化工作交由jdk的ObjectInputStream、ObjectOutputStream去完成，而复杂的网络IO则交由tribes通信框架完成。</p>
<p>关于源节点、备份节点、代理节点分别代表什么意思，每个集群每个会话只有一个源节点，一个备份节点，若干个代理节点。如下图，node1为源节点，表示会话对象由它创建，保存的是会话对象的原件；node3为备份节点，保存的是会话对象的备份件；node2和node4为代理节点，它们保存的仅仅是会话位置信息，例如备份节点node3的机器的ip。这样分类是为了提供failover能力，</p>
<ol>
<li>假如刚好源节点宕掉，请求落到备份节点则能获取到会话对象，此时备份节点变为源节点，再从node2、node4中选一个作为备份节点，并且把会话对象拷贝到新备份节点上；</li>
<li>假如备份节点宕掉了，请求一样能从源节点获取到会话对象，但此时会从node2、node4中选一个新备份节点，并把会话对象拷贝到新备份节点上；</li>
<li>假如代理节点宕掉了，一切没影响，正常工作。</li>
</ol>
<p><img src="https://dn-mhke0kuv.qbox.me/7efdf6159df520f96c73" alt=""></p>
<p>搞清楚上面介绍的基本原理后再看看LazyReplicatedMap具体是如何实现将会话对象既在本地存储又跨节点备份。<br>首先看下如何它是如何通过调用put方法实现保存，<br>第一步，先实例化用于保存会话相关信息的MapEntry对象，传入的参数key为会话id，value为会话对象，设置当前结点为源节点；<br>第二步，判断会话集中是否已经包含了此会话，如已存在则要删除本地及备份节点上的会话；<br>第三步，使用Round robin算法选出一个备份节点，并赋值到MapEntry对象的备份节点属性；<br>第四步，组装包含MSG_BACKUP标识的MapMessage对象发到备份节点告诉备份节点要备份我传过来的这个会话信息；<br>第五步，组装包含MSG_PROXY标识的MapMessage对象发送到除备份节点外的其他节点，告诉他们“你们是代理，请把此会话的id、源节点、备份节点等信息记录下”；<br>第六步，把MapEntry对象放入本地缓存；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public Object put(Object key, Object value) &#123;</div><div class="line">  ①实例化MapEntry，将key和value传入，并设置源节点为目前节点。</div><div class="line">  ②判断本地内存是否已包含key，如是则不仅要本地remove掉，还要跨节点remove。</div><div class="line">  ③通过Round robin算法从MapMember中选择一个作为备份节点。</div><div class="line">  ④实例化一个包含MSG_BACKUP标识的MapMessage对象并发送给备份节点。</div><div class="line">  ⑤实例化一个包含MSG_PROXY标识的MapMessage对象并发送给除了备份节点外的其他（代理）节点。</div><div class="line">  ⑥put进本地缓存。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，再看看它如何通过get实现获取会话对象操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Object get(Object key) &#123;</div><div class="line"> ①获取本地的MapEntry对象，它或许直接包含了会话对象，或许包含了会话对象的存放位置信息。</div><div class="line"> ②判断本节点是否属于源节点，如为源节点则直接获取MapEntry对象里面的会话对象并返回。</div><div class="line"> ③判断本节点是否属于备份节点，若为备份节点则直接获取MapEntry对象里面的会话对象作为返回对象，并且还要将本节点升为源节点、重新选取一个新备份节点，把MapEntry对象拷贝到新备份节点。</div><div class="line"> ④判断本节点是否属于代理节点，若为代理节点则向其他节点发送会话对象拷贝请求，“集群中谁有此会话对象请发送给我”，把接收到的会话对象放到本节点并作为返回对象，最后将本节点升为源节点。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，看看删除会话对象remove操作的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public Object remove(Object key) &#123;</div><div class="line"> ①删除本地此MapEntry对象。</div><div class="line"> ②广播其他节点删除此MapEntry对象。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面三个方法已经很清晰描述了新的Map是如何进行跨节点的增删改查的，BackupManager会话管理器就是通过这个新的Map进行会话管理。</p>
<p>以上即是tomcat集群机制源码基本的剖析，两种都有各自的优缺点，全节点模式是两两互相复制的，一旦集群节点数量及访问量大起来，将导致大量的会话信息需要互相复制同步，很容易导致网络阻塞，而且这些同步操作很可能会成为整体性能的瓶颈，根据经验，此种方案在实际生产上推荐的集群节点个数为3-6个，无法组建更大的集群，而且冗余了大量的数据，利用率不高。而会话备份模式则大大减少了网络流量和逻辑操作，可构建较大的集群，生产上可以组成十个以上的节点，虽然这种模式支持更大的集群，但它也有自己的缺点，例如它只有一个数据备份，假如刚好源数据和备份数据所在的机器同时宕掉了，则没办法恢复数据，不过刚好同时宕机的机率很小很小。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着互联网快速发展，各种各样供外部访问的系统越来越多且访问量越来越大，以前Web容器可以包揽接收-逻辑处理-响应整个请求生命周期的工作，现在为了构建让更多用户访问更强大的系统，人们通过不断地业务解耦、架构解耦将web容器的逻辑处理抽离交由其他中间件处理，例如缓存中间件、消息
    
    </summary>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的七种join</title>
    <link href="http://yoursite.com/2017/04/04/mysql-7-join/"/>
    <id>http://yoursite.com/2017/04/04/mysql-7-join/</id>
    <published>2017-04-04T09:56:00.000Z</published>
    <updated>2017-04-10T14:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql的七种join"><a href="#Mysql的七种join" class="headerlink" title="Mysql的七种join"></a>Mysql的七种join</h1><blockquote>
<p>对于SQL的Join，在学习起来可能是比较乱的。我们知道，SQL的Join语法有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有一篇文章（实在不清楚为什么Coding Horror也被墙）通过 文氏图 Venn diagrams解释了SQL的Join。</p>
</blockquote>
<h1 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h1><p>在这里呢我们先来建立两张有外键关联的张表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE db0206;</div><div class="line">USE db0206;</div><div class="line"></div><div class="line">CREATE TABLE `db0206`.`tbl_dept`(  </div><div class="line">  `id` INT(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `deptName` VARCHAR(30),</div><div class="line">  `locAdd` VARCHAR(40),</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=INNODB CHARSET=utf8;</div><div class="line"></div><div class="line">CREATE TABLE `db0206`.`tbl_emp`(  </div><div class="line">  `id` INT(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  `name` VARCHAR(20),</div><div class="line">  `deptId` INT(11),</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  FOREIGN KEY (`deptId`) REFERENCES `db0206`.`tb_dept`(`id`)</div><div class="line">) ENGINE=INNODB CHARSET=utf8;</div><div class="line">/*插入数据*/</div><div class="line">INSERT INTO tbl_dept(deptName,locAdd) VALUES(&apos;RD&apos;,11);</div><div class="line">INSERT INTO tbl_dept(deptName,locAdd) VALUES(&apos;HR&apos;,12);</div><div class="line">INSERT INTO tbl_dept(deptName,locAdd) VALUES(&apos;MK&apos;,13);</div><div class="line">INSERT INTO tbl_dept(deptName,locAdd) VALUES(&apos;MIS&apos;,14);</div><div class="line">INSERT INTO tbl_dept(deptName,locAdd) VALUES(&apos;FD&apos;,15);</div><div class="line"></div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;z3&apos;,1);</div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;z4&apos;,1);</div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;z5&apos;,1);</div><div class="line"></div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;w5&apos;,2);</div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;w6&apos;,2);</div><div class="line"></div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;s7&apos;,3);</div><div class="line"></div><div class="line">INSERT INTO tbl_emp(NAME,deptId) VALUES(&apos;s8&apos;,4);</div></pre></td></tr></table></figure>
<h1 id="文氏图与SQL语句的编写以及查询结果"><a href="#文氏图与SQL语句的编写以及查询结果" class="headerlink" title="文氏图与SQL语句的编写以及查询结果"></a>文氏图与SQL语句的编写以及查询结果</h1><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><h3 id="内连接文氏图"><a href="#内连接文氏图" class="headerlink" title="内连接文氏图"></a>内连接文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906671067372.png" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果"><a href="#执行的sql语句以及执行的查询结果" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from tbl_dept a inner join tbl_emp b on a.id=b.deptId;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果<br>  <img src="http://oo77gy3uq.bkt.clouddn.com/14906671283981.png" alt=""></li>
</ul>
<h2 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h2><h3 id="左外连接文氏图"><a href="#左外连接文氏图" class="headerlink" title="左外连接文氏图"></a>左外连接文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906671404628.png" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果-1"><a href="#执行的sql语句以及执行的查询结果-1" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from tbl_dept a left join tbl_emp b on a.id=b.deptId;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果<br> <img src="http://oo77gy3uq.bkt.clouddn.com/14906671491566.png" alt=""></li>
</ul>
<h2 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h2><h3 id="右外连接文氏图"><a href="#右外连接文氏图" class="headerlink" title="右外连接文氏图"></a>右外连接文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906671586536.jpg" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果-2"><a href="#执行的sql语句以及执行的查询结果-2" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from tbl_dept a right join tbl_emp b on a.id=b.deptId;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果<br>  <img src="http://oo77gy3uq.bkt.clouddn.com/14906671715548.png" alt=""></li>
</ul>
<h2 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h2><h3 id="左连接文氏图"><a href="#左连接文氏图" class="headerlink" title="左连接文氏图"></a>左连接文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906671817769.png" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果-3"><a href="#执行的sql语句以及执行的查询结果-3" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elect * from tbl_dept a left join tbl_emp b on a.id=b.deptId where b.deptId is null;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果</li>
</ul>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/14906671960016.png" alt=""></p>
<h2 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h2><h3 id="右连接文氏图"><a href="#右连接文氏图" class="headerlink" title="右连接文氏图"></a>右连接文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906672122367.jpg" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果-4"><a href="#执行的sql语句以及执行的查询结果-4" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from tbl_dept a right join tbl_emp b on a.id=b.deptId where a.id is null;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果</li>
</ul>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/14906672303744.png" alt=""></p>
<h2 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h2><h3 id="全连接文氏图"><a href="#全连接文氏图" class="headerlink" title="全连接文氏图"></a>全连接文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906672393192.png" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果-5"><a href="#执行的sql语句以及执行的查询结果-5" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from tbl_dept a right join tbl_emp b on a.id=b.deptId </div><div class="line">union </div><div class="line">select * from tbl_dept a left join tbl_emp b on a.id=b.deptId;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果<br> <img src="http://oo77gy3uq.bkt.clouddn.com/14906672485581.png" alt=""></li>
</ul>
<h2 id="两张表中都没有出现的数据集"><a href="#两张表中都没有出现的数据集" class="headerlink" title="两张表中都没有出现的数据集"></a>两张表中都没有出现的数据集</h2><h3 id="文氏图"><a href="#文氏图" class="headerlink" title="文氏图"></a>文氏图</h3><p><img src="http://oo77gy3uq.bkt.clouddn.com/14906672571414.jpg" alt=""></p>
<h4 id="执行的sql语句以及执行的查询结果-6"><a href="#执行的sql语句以及执行的查询结果-6" class="headerlink" title="执行的sql语句以及执行的查询结果"></a>执行的sql语句以及执行的查询结果</h4><ul>
<li>执行的sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from tbl_dept a right join tbl_emp b on a.id=b.deptId where a.id is null union select * from tbl_dept a left join tbl_emp b on a.id=b.deptId where b.deptId is null;</div></pre></td></tr></table></figure>
<ul>
<li>查询结果</li>
</ul>
<p><img src="http://oo77gy3uq.bkt.clouddn.com/SouthEast." alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mysql的七种join&quot;&gt;&lt;a href=&quot;#Mysql的七种join&quot; class=&quot;headerlink&quot; title=&quot;Mysql的七种join&quot;&gt;&lt;/a&gt;Mysql的七种join&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于SQL的Join，在学习起来可
    
    </summary>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/04/hello-world/"/>
    <id>http://yoursite.com/2017/04/04/hello-world/</id>
    <published>2017-04-04T09:08:51.000Z</published>
    <updated>2017-04-04T09:08:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
